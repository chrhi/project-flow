generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ROLES {
  Admin
  ProjectManager
  TeamMember
  Client
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
 
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  LastName         String?
  UserName         String?
  OrganizationName String?
  email            String    @unique
  emailVerified    DateTime?
   required          String
  password         String?
  image            String?
  selectedOrganizationId String? 
  role             ROLES     @default(TeamMember)
  accounts         Account[]
  sessions         Session[]

  organization Organization[]
}

model Organization {
  id        String    @id @default(cuid())
  userId    String
  name      String?
  Members   Json
  Leader    String
  Category  String?
  tag       String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project[]

  @@index([id])
  @@index([userId])
}

model JoinRequest {
  id               String   @id @default(cuid())
  OrganizationName String
  OrganizationId   String 
  senderName       String
  senderId         String
  senderAvatar     String 
  senderEmail      String
  typeRelation     String
  targetEmail      String
  createdAt        DateTime @default(now())

  @@index([id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MileStones {
  id          String    @id @default(cuid())
  projectId   String
  name        String?   @db.LongText
  description String?   @db.LongText
  dueDate     DateTime?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([projectId])
}

model ProjectObjectives {
  id                      String   @id @default(cuid())
  projectId               String
  THE_PROJECTS_OBJECTIVES String?  @db.LongText
  SUCCESS_CRITERIA        String?  @db.LongText
  APPROVAL                String?  @db.LongText
  Type                    String?  @db.LongText
  project                 Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([projectId])
}

model Project {
  id                   String              @id @default(uuid())
  title                String?
  startAt              DateTime?
  endsAt               DateTime?
  currentPhase         String?             @db.LongText
  OrganizationId       String
  WorkBreakDownStorage Json?
  Budget               Float?
  Organization         Organization?       @relation(fields: [OrganizationId], references: [id], onDelete: Cascade)
  StakHolder           StakeHolder[]
  Risk                 Risk[]
  Resource             Resources[]
  Comunications        Comunications[]
  MileStones           MileStones[]
  Tasks                Tasks[]
  ProjectObjectives    ProjectObjectives[]
  Document             Document[]

  @@index([id])
  @@index([OrganizationId])
}

model Tasks {
  id                 String    @id @default(uuid())
  projectId          String?
  title              String?
  description        String?
  Priority           String?
  Color              String?
  StartAt            DateTime?
  EndsAt             DateTime?
  EndedAt            DateTime?
  cost               Float?
  RealCost           Float?
  imgUrl             String?
  progress           Int?
  Shape              String?
  Status             String?
  AssignedTo         Json?
  AlocatedRessources Json?
  project            Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([projectId])
}

model Document {
  id        String   @id @default(uuid())
  name      String?
  url       String?
  path      String?
  createdAt DateTime @default(now())
  status    String?
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([projectId])
}

model StakeHolder {
  id               String   @id @default(uuid())
  projectId        String?
  name             String?
  type             String
  position         String?
  impact           String?
  role             String?  @db.LongText
  Requirements     String?  @db.LongText
  contact          String?
  InvestmentAmount String?
  Expectations     String?  @db.LongText
  project          Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([projectId])
}

model Risk {
  id        String  @id @default(uuid())
  projectId String?
  name      String?
  cost      String?

  description   String?  @db.LongText
  levelOfDanger String?
  solutions     String?  @db.LongText
  project       Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([projectId])
}

model Resources {
  id          String   @id @default(uuid())
  projectId   String?
  name        String?
  description String?  @db.LongText
  cost        Float?
  quality     String?
  imageUrl    String?
  project     Project? @relation(fields: [projectId], references: [id])

  @@index([id])
  @@index([projectId])
}

model Comunications {
  id          String    @id @default(uuid())
  projectId   String?
  stakeholder Json?
  description String?   @db.LongText
  time        DateTime?
  method      String?
  Sender      String?

  project Project? @relation(fields: [projectId], references: [id])

  @@index([id])
  @@index([projectId])
}
