generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ROLES {
  Admin
  ProjectManager
  TeamMember
  Client
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
 
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@unique([provider, providerAccountId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  LastName         String?
  UserName         String?
  OrganizationName String?
  jobTitle         String?
  Phone            String?
  Address          String?
  city             String?
  state            String?
  Country          String?
  ZipCode          String?
  email            String    @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  
  selectedOrganizationId String? 
  role             ROLES     @default(TeamMember)
  accounts         Account[]
  sessions         Session[]
  notifications    Notifications[]
  organization     Organization[]
}

model Note {
    id             String    @id @default(cuid())
    title          String 
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    timestamp      DateTime  @default(now())
    projectId      String 
    content        Json?
    authorEmail    String 
    authorId       String 
    authorName     String
    project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
    @@index([id])
    @@index([projectId])
}

model Message {
    id          String    @id @default(cuid())
    receiverId  String 
    ChatId      String
    senderId    String
    senderImage String
    senderName  String 
    senderEmail String
    text        String  @db.LongText
    type        String 
    url         String?
    timestamp   DateTime  @default(now())
    @@index([id])
}

model ChatMessageProject {
    id          String    @id @default(cuid())
    projectId   String
    senderImage String
    senderName  String 
    senderEmail String
    receiverId  String 
    ChatId      String
    senderId     String
    text        String  @db.LongText
    type        String 
    url         String?
    timestamp   DateTime  @default(now())
    project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    @@index([id])
    @@index([projectId])
}

model Organization {
  id           String    @id @default(cuid())
  userId       String
  name         String?
  image        String    @default("https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmphZTJ4bmMyaW94dTZucXJpc2c3MGN4NDMyOWI5N3BqbTNpZW9rYSZlcD12MV9naWZzX3NlYXJjaCZjdD1n/EIUb4bjamL8K0InISB/source.gif")   
  description  String?
  Members      Json
  Leader       String
  Category     String?
  tag          String?
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project      Project[]
  @@index([id])
  @@index([userId])
}

model JoinRequest {
  id               String   @id @default(cuid())
  OrganizationName String
  OrganizationId   String 
  senderName       String
  senderId         String
  senderAvatar     String 
  senderEmail      String
  typeRelation     String
  targetEmail      String
  createdAt        DateTime @default(now())

  @@index([id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([id])
  @@index([userId])
}



model Project {
  id                   String              @id @default(uuid())
  title                String
  type                 String  //this one idicates if the project is using pmbook or not it could be SIMPLE or COMPLEXE
  image                String
  imagetype            String     
  createdBy            String         
  description          String              @db.LongText
  startAt              DateTime?
  endsAt               DateTime?
  currentPhase         String?             @db.LongText
  OrganizationId       String
  WorkBreakDownStorage Json?
  Budget               Float?
  team                 Json
  content              Json?
  createdAt            DateTime            @default(now())
  notes                Note[]
  messages             ChatMessageProject[]
  Organization         Organization?       @relation(fields: [OrganizationId], references: [id], onDelete: Cascade)
  @@index([id])
  @@index([OrganizationId])
}

model Notifications {
   id                   String              @id @default(uuid())
   messages             Int                 @default(0)
   invites              Int                 @default(0)
   tasks                Int                 @default(0)
   userId               String              @unique
   user                 User @relation(fields: [userId], references: [id], onDelete: Cascade)
   @@index([id])
   @@index([userId])
}









