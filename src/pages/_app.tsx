/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import { type AppType } from 'next/app';
import NextNProgress from 'nextjs-progressbar';
import { api } from '~/utils/api';
import 'react-toastify/dist/ReactToastify.css';
import '~/styles/globals.css';
import { supabase } from '~/lib/supbase';
import { Loading } from '~/components/common/Loading';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useEffect } from 'react';
import { loading_Reducer } from '~/store/app-reducer/loadingReducer';
import { userReducer } from '~/store/userReducer';
import Head from 'next/head';
import 'reactflow/dist/style.css';
import 'react-loading-skeleton/dist/skeleton.css'
import { ReactFlowProvider } from 'reactflow';
import { AccessPopUp } from '~/components/common/AccessPopUp';
import { RemoveProjectManager, SetAsProjectManager, getUserMetadata } from '~/lib/MetaData';


const MyApp: AppType = ({ Component, pageProps }) => {
  const set_isLoading = loading_Reducer(state => state.set_isLoading);
  const set_user = userReducer(state => state.set_user);

  useEffect(() => {
    async function getInitialReferences() {
      const user_id = getUserMetadata();

      if (user_id) {
        const { error, data: user_info } = await supabase.from('user').select('*').eq('id', user_id);

        if (error) {
          throw new Error("we can't find user auth");
        }

        return user_info;
      }
    }

    getInitialReferences()
      .then(user_info => {
        // This is the first check
        if (!user_info) {
          console.log("we couldn't get the user information at app /");
          return;
        }

        set_user({
          email: user_info[0]?.email,
          photo: user_info[0]?.photo,
          first_name: user_info[0]?.user_name,
          last_name: user_info[0]?.user_last_name,
        });

        // Check if this is a team member
        if (user_info[0]?.role === 'TEAM_MEMBER') {
          RemoveProjectManager();
          return;
        }

        SetAsProjectManager();
      })
      .catch(() => {
        console.error('There was an error in the _app.tsx file');
      });
  }, [set_isLoading, set_user]);

  return (
    <div className="w-full h-fit relative">
      <NextNProgress options={{ showSpinner: false }} />
      <Loading />
      <AccessPopUp />
      <ToastContainer theme="dark" />
      <Head>
        <title>ProjectFlow</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" type="image/png" sizes="32x32" href="/logo.png" />
      </Head>
      <ReactFlowProvider>
        <Component {...pageProps} />
      </ReactFlowProvider>
    </div>
  );
};

export default api.withTRPC(MyApp);
